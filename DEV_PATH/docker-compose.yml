version: '3'

services:
    nginx:
# при падении будет стараться подняться
        restart: always
# только свежий nginx
        image: nginx:latest
# слушает порт 8080
        expose:
          - 8080
# мапаем порт 80 на его 8080. Тогда сайт будет доступен по адресу localhost. Убедись, что порт у тебя не занят.
        ports:
          - "80:8080"
# монтируем только те директории, в которых лежит статика, т.к. nginx с динамикой не будет работать. Также директорию с логами и файл настройки, который мы подготовили.
        volumes:
            - ./app/static:/srv/www/app/static
            - ./app/media:/srv/www/app/media
            - ./app/logs:/srv/www/app/logs
            - ./docker/nginx:/etc/nginx/conf.d
# и nginx зависит от контейнера python. Т.е. python должен быть запущен первым
        depends_on:
            - python
    python:
        restart: always
# указываем откуда собирать образ
        build:
            context: .
            dockerfile: docker/python/Dockerfile
# монтируем директорию проекта
        volumes:
            - ./app:/srv/www/app
        expose:
          - 8000
        ports:
            - 8001:8000
# запускаем gunicorn
        command: "gunicorn -c gunicorn.py app.wsgi"
    db:
# Ниже даже расписывать не хочу, насколько все просто: логин, пароль, БД, порты и т.д.
        image: postgres:latest
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
          - 5432:5432
        environment:
            - POSTGRES_USER=sergey
            - POSTGRES_PASSWORD=34ubitav
            - POSTGRES_DB=upload
# хранилища
volumes:
    postgres_data:
        